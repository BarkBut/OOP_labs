#include <iostream>
#include "bookshelf.h"
#include "printBook.h"

// Этот файл содержит интерфейс взаимодействия с программой. Однажды я его улучшу, но сейчас больше не могу :)

void print_help(){  // Справка, список всех действий (может быть дополнен)
    std::cout << "\n"
              << "Выберете пункт меню:\n"
              << "0. Выйти\n"
              << "1. Вывести все книги\n"
              << "2. Вывести кол-во полок в шкафу\n"
              << "3. Вывести кол-во книг в шкафу\n"
              << "4. Вывести все книги на полке\n"
              << "5. Найти книгу по названию и автору\n"
              << "6. Найти местоположение книги\n"
              << "7. Узнать, какая книга лежит на этом месте\n"
              << "8. Добавить новую книгу\n"
              << "9. Редактировать книгу\n"
              << "10. Удалить книгу\n"
              << "11. Переместить книгу\n"
              << "12. Помощь\n\n";
}

void readbook(std::string & title, std::string & author){   // считывание названия и автора, нужно для многих методов
    std::cin.get();
    std::cout << "Введите название книги\n";             // поэтому вынесено в отдельную функцию
    std::getline(std::cin, title); // эта запись умеет считывать строку вместе с пробелами
    std::cout << "Введите автора книги\n";
    std::getline(std::cin, author);
}

/*
 *  switch это условный оператор, удобный для нескольких случаев
 *  в зависимости от значения переменной command
 *  выполняется одна из следующих case инструкций
 *  switch выполняется в бесконечном цикле,
 *  который прервется только при case 0, т к там есть return
 *  прочие case после окончания прерываются break, который завершает выполнение case
 *  но не завершает выполнение цикла
 */

int main() {
//  std::cin.sync_with_stdio(false);
    int command = 0;
    std::string title;
    std::string author;

    Bookshelf bookshelf(5);
    print_help();

    for(;;){                // бесконечный цикл
        std::cin >> command;
        switch (command){
            case 0:     // Выйти========================================================================================
            {
                std::cout << "Приятного чтения\n";
                return 0;
            }
            case 1:    //  Вывести все книги============================================================================
            {
                bookshelf.writeAll();
                break;
            }
            case 2:    // Вывести кол-во полок==========================================================================
            {
                bookshelf.writeSize();
                break;
            }
            case 3:     // Вывести кол-во книг в шкафу==================================================================
            {
                bookshelf.writeNumber();
                break;
            }
            case 4:    // Вывести все книги на полке====================================================================
            {
                unsigned int number;
                std::cout << "\nВведите номер полки\n";
                std::cin >> number;
                bookshelf.writeShelf(number);
                break;
            }
            /*==========================================================================================================
             * в следующем case происходит обработка исключений,
             * которые возникали у нас при неккоректной работе методов (cм .cpp файлы)
             * try {код который работает, но может не сработать в исключительном случае и скажет об этом}
             * catch(исключение, о котором скажет код){что в таком случае делать}
             */
            case 5:  // Найти книгу по названию и автору================================================================
            {                                                                                    /// case с исключением
                readbook(title, author);
                try {
                    PrintBook book = bookshelf.getBook(title, author);
                    book.writeBook();
                } catch (std::domain_error not_found) {
                    std::cout << not_found.what();     // в описании исключения уже есть инструкция, что делать
                }
                break;
            }
            case 6:     // Найти местоположение книги===================================================================
            {
                readbook(title, author);
                bookshelf.writeAddress(title, author);
                break;
            }
            case 7:     // Узнать, какая книга лежит на этом месте======================================================
            {                                                                                    /// case с исключением
                try {
                    unsigned int shelf_number, place;
                    std::cout << "Введите номер полки\n";
                    std::cin >> shelf_number;
                    std::cout << "Введите место на полке\n";
                    std::cin >> place;
                    bookshelf.getBook(place, shelf_number);
                } catch(std::domain_error place_notplace){
                    std::cout << place_notplace.what();
                }

                break;
            }
            case 8:     // Добавить новую книгу=========================================================================
            {
                unsigned int pages, number;
                readbook(title, author);
                std::cout << "Введите количество страниц\n";
                std::cin >> pages;
                PrintBook newbook(title, author, pages);
                std::cout << "Введите номер полки, на которую нужно поместить новую книгу\n";
                std::cin >> number;
                bookshelf.addBook(number, newbook);
                break;
            }
            // todo это тоже вид комментариев
            // todo объеденить кейсы ниже в подменю редактирования книги:
            // Удалить, поменять поля, переставить на другую полку
            case 9:     // Редактировать книгу==========================================================================
            {
                readbook(title, author);
                try {
                    PrintBook & book = bookshelf.getBook(title, author);
                    book.writeBook();
                } catch (std::domain_error not_found) {
                    std::cout << not_found.what();
                }
                break;
            }
            case 10:   // Удалить книгу=================================================================================
            {
                readbook(title, author);
                bookshelf.removeBook(title, author);
                break;
            }
            // todo сделать разные варианты перемещения
            case 11:   // Переместить книгу=============================================================================
            {
                readbook(title, author);
                try {
                    PrintBook putbook = bookshelf.getBook(title, author);
                    bookshelf.removeBook(title, author);
                    std::cout << "Введите книгу, после которой должна стоять перемещаемая книга\n";
                    readbook(title, author);
                    PrintBook afterbook = bookshelf.getBook(title, author);
                    bookshelf.putBook(bookshelf.findShelf(title,author),afterbook, putbook);
                } catch (std::domain_error not_found) {
                    std::cout << not_found.what();
                }
                break;
            }
            case 12:    // Помощь=======================================================================================
            {
                print_help();
                break;
            }
            /*
             * дальше идет обработка неверного ввода команды
             * поток ввода нужно восстановить после ошибки
             */
            default: //=================================================================================================
            {
                std::cout << "Неверная команда\n";
            }
            command = 0;
        }   //==========================================================================================================
    }
    return 0;
}
















/*
 * наиболее подробные комментарии содержатся в book.* и shelf.*
 * я очень устала
 * отдельное спасибо kiri3l за объяснение сложных штук навроде
 * зачем говорить cin про хороший бит
 * как делать перегрузку операторов, которая крутая, но в итоге я решила её убрать :)
 * и о том, кто будет обрабатывать мои исключения вместо меня
 */

