#ifndef LAB1_SHELF_H
#define LAB1_SHELF_H

#include <vector>
#include "printBook.h"

// Это заголовочный файл. Здесь находится обьявление (перечисление) полей и методов класса Полка aka Shelf

class Shelf {
    unsigned int shelf_number;               // порядковый номер полки
    unsigned int shelf_size;                // максимальное колво книг на полке
    std::vector<PrintBook> books_list;     // список самих книг

    /*
     * для хранения книг на полке я использую вектор
     * это контейнер, позволяющий упорядоченное хранение элементов
     * с возможностью добавлять новые элементы в любое место
     * на самом деле это обычный массив,
     * просто добавление элементов и многое другое уже реализовано за нас
     * в библиотеке vector
     */

public:
    /*
     * ниже -- обявление конструктора
     * он создает элемент класса полка
     * (выделяет память под него)
     * если конструктору не передали значения размера и номера
     * он присваивает этим значениям нули (значения по умолчанию)
     * explicit писать необязательно,
     * эта команда просто защищает от неправильного вызова конструктора
     * от одного параметра: Shelf polka = 42 --> Shelf(42, 0)
     * у класса Book немного по-другому реализован конструктор по умолчанию,
     * так тоже можно, а можно вообще без конструктора по умолчанию (без иницилизации нулями) делать,
     * тогда будет нельзя создать элемент класса с пустыми полями
     */

    explicit Shelf(unsigned int shelf_number = 0, unsigned int shelf_size = 0);

    unsigned int getNumber();             // этот метод возвращает номер заданной полки
    unsigned int getSize();             // этот метод возвращает размер заданной полки

    bool findBook(std::string title, std::string author);  // проверяет, есть ли эта книга на заданной полке

    int getPlace(PrintBook gbook);      // этот метод возвращает место книги на полке

    PrintBook getBook(std::string title, std::string author);  // этот метод возвращает книгу по названию и автору
    PrintBook getBook(unsigned int place);                    // этот метод возвращает книгу по месту на полке

    void setNumber(unsigned int number);        // этот метод присваивает полке номер
    void setSize(unsigned int size);           // этот метод присваивает полке размер
    void addBook(PrintBook abook);            // этот метод добавляет книгу на полку
    void putBook(PrintBook afterbook, PrintBook putbook);  // этот метод ставит книгу после заданной книги
    void removeBook(unsigned int rbook_place);       // этот метод убирает книгу с полки
    void writeShelf();                     // этот метод выводит содержимое полки

    ~Shelf();                            // деструктор -- удаляет всю полку

};

#endif